# -*- coding: utf-8 -*-
"""
Created on Fri Jan 12 11:52:47 2024

@author: 0
"""
"""
Скрипт поиска геометрическхи фигур - окружностей на изображениях, с целью идентификации предметов похожих на монету :)

"""

%matplotlib inline
%config InlineBackend.figure_format = 'retina'

import cv2 as cv
import numpy as np
import math
import matplotlib as mpl
import matplotlib.pyplot as plt
from pprint import pprint

#Выставим разрешение картинки по умолчанию 200 dpi
mpl.rcParams['figure.dpi'] = 200
#считаем оригинальное изображение
original = cv.imread("D:\\python\\coins_parser\\pictures_dataset\\10_kop_silver_sorted\\test\\coins\\coins238.jpg")
#в следующие 2 переменные detected и img поместим копии считанного изображения
detected = original.copy()
img = original.copy()
#одну из копий в переменной img преобразуем в оттенки серого
img = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
# и далее применим фильтр medianBlur
img = cv.medianBlur(img, 5)
#Создадим изображение при помощи объекта plt
fig = plt.figure()
#добавим дополнительное изображение к основному
fig.add_subplot(1, 2,1)
#отключим оси графика на постраевомом изображении)))
plt.axis('off')
#Укажем в заголовке картинки, что это оригинал
plt.title("Original")
#прорисуем оригинальную картинку
plt.imshow(cv.cvtColor(original, cv.COLOR_BGR2RGB))

#Добавим дополнительное изображение к основному, оно будет в оттенках серого
fig.add_subplot(1,2,2)
#Выключим отображение осей и укажем заголовок
plt.axis('off')
plt.title('Gray/Blur')
#при помощи атрибута cmap укажем, что нам нужно изображение в оттенках серого
plt.imshow(img, cmap='gray')

plt.show()

#С помощью метода cv.trashold укажем порог, разделяющий изображение на чёрное и белое, построим граффик контрастности
ret, thresh = cv.threshold(img, 215, 255, cv.THRESH_BINARY+cv.THRESH_OTSU)
rer, thresh = cv.threshold(img, ret-10, 255, cv.THRESH_BINARY)
plt.axvline(x=ret, color="r")
print("Threshold value: {}".format(ret))
plt.hist(img.ravel(),256,[0,256])
plt.show()

#Отобразим Ч\Б изображение
fig = plt.figure()
fig.add_subplot(1, 1, 1)
plt.axis('off')
plt.title("Threshold: ({}/255)".format(ret))
plt.imshow(thresh, cmap='gray')

plt.show()
#Найдём контуры изображений на окружности
contours, hierarchy = cv.findContours(thresh, cv.RETR_TREE, cv.CHAIN_APPROX_SIMPLE)
# Далее мы проходимся в цикле по нашим контурам, где с помощью функции boundingRect() находим ограничительные рамки каждого контура: начальные x и y координаты, за которыми следуют ширина и высота рамки
sorted_ctrs = sorted(contours, key = lambda ctr: cv.boundingRect(ctr)[0])
approxPolyCurves = original.copy()

for i, ctr in enumerate(sorted_ctrs):
    epsilon = 0.001*cv.arcLength(ctr,True)
    approx = cv.approxPolyDP(ctr,epsilon,True)    
    cv.drawContours(approxPolyCurves, approx, -1, (0, 0, 255), 3)

plt.title("Approximated Polygonal Curves")
plt.axis('off')
plt.imshow(cv.cvtColor(approxPolyCurves, cv.COLOR_BGR2RGB))
plt.show()

circleAreas = []
circleCenters = []
circles = {}

coins = {"500": 0, "100": 0, "50": 0, "10": 0, "5": 0, "1": 0}

for i, ctr in enumerate(sorted_ctrs):
    #Функция arcLength возвращает длину дуги контура.
    epsilon = 0.001*cv.arcLength(ctr, True)
    #Функция cv.approxPolyDP находит координаты вершин изображения
    approx = cv.approxPolyDP(ctr, epsilon, True)
    if (len(approx) > 80):
        #minEnclosingCircle - определяет координаты центра окружности и заносит их в x и y
        #а так же определяет радиус окружности - переменная radius
        (x,y), radius = cv.minEnclosingCircle(ctr)
        if (thresh[int(y)][int(x)] != 0):
            area = int(math.pi*(radius**2))
            circles[radius] = (int(x), int(y))
            fontColor = (0,0,0)
            imgcenter = (int(x-15),int(y-10))
            font = cv.FONT_HERSHEY_SIMPLEX

            if (area > 7500):
                coins["500"] += 1
                text = "500"
                fontColor = (255,255,255)
            elif (7500 > area >= 6300):
                coins["100"] += 1
                text = "100"
                fontColor = (0,0,255)
            elif (6300 > area >= 5500):
                coins["10"] += 1
                text = "10"
                fontColor = (255,255,88)
            elif (5500 > area >= 5000):
                coins["50"] += 1
                text = "50"
                fontColor = (255,0,120)
            elif (5000 > area >= 3800):
                coins["5"] += 1
                text = "5"
                fontColor = (0,255,0)
            elif (area < 3800):
                coins["1"] += 1
                text = "1"
                fontColor = (88,255,255)
            cv.putText(detected, str(text), imgcenter, font, 0.6, fontColor, 2)
#                 cv.putText(original, str("{}: {}".format(text, int(radius))), imgcenter, font, 0.6, fontColor, 2)
            cv.circle(detected, (int(x), int(y)), int(radius), fontColor, 2)
            cv.rectangle(detected, (int(x), int(y)), (int(x)+5,int(y)+5), fontColor, 5)
cv.imwrite("D:\\python\\coins_parser\\pictures_dataset\\10_kop_silver_sorted\\test\\coins\\detected.jpg", detected)
ig = plt.figure()

fig.add_subplot(1, 2, 1)
plt.axis('off')
plt.title("Original")
plt.imshow(cv.cvtColor(original, cv.COLOR_BGR2RGB))

fig.add_subplot(1, 2, 2)
plt.axis('off')
plt.title("Detected coins | 500: {0}, 100: {1}, 50: {2}, 10: {3}, 1: {4}".format(coins["500"], coins["100"], coins["50"], coins["10"], coins["1"]))
plt.imshow(cv.cvtColor(detected, cv.COLOR_BGR2RGB))

plt.show()